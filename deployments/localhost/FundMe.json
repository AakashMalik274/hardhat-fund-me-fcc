{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8ec0d4899c8d099c2314299b40a5cabe99d8b7dce00915f9a637c9ee5b71e73",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1086309",
    "logsBloom": "0x
    "blockHash": "0xbda226129ceb6222d34982aa788a9bdc5fc8c53a13f44948e5eabfc815cf6621",
    "transactionHash": "0xd8ec0d4899c8d099c2314299b40a5cabe99d8b7dce00915f9a637c9ee5b71e73",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1086309",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a2a836b6a29ac8cc9dd286acc841f202",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aakash Malik\",\"details\":\"This implements pricefeeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements pricefeeds as our library\"}},\"title\":\"A contract for crowd funding \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding \\n * @author Aakash Malik\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements pricefeeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    address private /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**@notice This function funds this contract\\n     * @dev This implements pricefeeds as our library\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        \\n        s_funders = new address[](0);\\n        \\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n        \\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funderCopy = s_funders;\\n        for(uint256 funderIndex=0;funderIndex<funderCopy.length; funderIndex++){\\n            address funder = funderCopy[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess,\\\"Call Failed\\\");\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\\n\",\"keccak256\":\"0xb45dea89fbb245645f2b477fe91b7178aff137d960eea278174c18445567f551\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x71592abac56e937d4585c7faa1f23b2d974df0b38d0bdb3c9925f740897d9af8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200134c3803806200134c83398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b6111e0806200016c6000396000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101765761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aac565b6101b3565b6040516100b49190610af2565b60405180910390f35b3480156100c957600080fd5b506100d26101fb565b005b3480156100e057600080fd5b506100e961043d565b6040516100f69190610af2565b60405180910390f35b34801561010b57600080fd5b5061011461044a565b6040516101219190610b1c565b60405180910390f35b34801561013657600080fd5b5061013f610474565b60405161014c9190610b96565b60405180910390f35b61015d61049e565b005b34801561016b57600080fd5b506101746105d8565b005b34801561018257600080fd5b5061019d60048036038101906101989190610bdd565b61087e565b6040516101aa9190610b1c565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610282576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561032d576000600182815481106102a8576102a7610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032590610c68565b915050610285565b50600067ffffffffffffffff81111561034957610348610cb1565b5b6040519080825280602002602001820160405280156103775781602001602082028036833780820191505090505b506001908051906020019061038d9291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b490610d11565b60006040518083038185875af1925050503d80600081146103f1576040519150601f19603f3d011682016040523d82523d6000602084013e6103f6565b606091505b505090508061043a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190610d83565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104dd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c690919063ffffffff16565b101561051e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051590610def565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056c9190610e0f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610699575b5050505050905060005b815181101561076d57600082828151811061070b5761070a610c0a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076590610c68565b9150506106ed565b50600067ffffffffffffffff81111561078957610788610cb1565b5b6040519080825280602002602001820160405280156107b75781602001602082028036833780820191505090505b50600190805190602001906107cd9291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f490610d11565b60006040518083038185875af1925050503d8060008114610831576040519150601f19603f3d011682016040523d82523d6000602084013e610836565b606091505b505090508061087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190610eb1565b60405180910390fd5b5050565b60006001828154811061089457610893610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d283610902565b90506000670de0b6b3a764000085836108eb9190610ed1565b6108f59190610f5a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611018565b5050509150506402540be4008161099a9190611093565b915050919050565b828054828255906000526020600020908101928215610a1b579160200282015b82811115610a1a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c2565b5b509050610a289190610a2c565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7982610a4e565b9050919050565b610a8981610a6e565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b600060208284031215610ac257610ac1610a49565b5b6000610ad084828501610a97565b91505092915050565b6000819050919050565b610aec81610ad9565b82525050565b6000602082019050610b076000830184610ae3565b92915050565b610b1681610a6e565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b6000819050919050565b6000610b5c610b57610b5284610a4e565b610b37565b610a4e565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b610bba81610ad9565b8114610bc557600080fd5b50565b600081359050610bd781610bb1565b92915050565b600060208284031215610bf357610bf2610a49565b5b6000610c0184828501610bc8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610ad9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ca657610ca5610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cfb600083610ce0565b9150610d0682610ceb565b600082019050919050565b6000610d1c82610cee565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d6d600b83610d26565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dd9601b83610d26565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b6000610e1a82610ad9565b9150610e2583610ad9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e5a57610e59610c39565b5b828201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e9b600b83610d26565b9150610ea682610e65565b602082019050919050565b60006020820190508181036000830152610eca81610e8e565b9050919050565b6000610edc82610ad9565b9150610ee783610ad9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2057610f1f610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6582610ad9565b9150610f7083610ad9565b925082610f8057610f7f610f2b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610faa81610f8b565b8114610fb557600080fd5b50565b600081519050610fc781610fa1565b92915050565b6000819050919050565b610fe081610fcd565b8114610feb57600080fd5b50565b600081519050610ffd81610fd7565b92915050565b60008151905061101281610bb1565b92915050565b600080600080600060a0868803121561103457611033610a49565b5b600061104288828901610fb8565b955050602061105388828901610fee565b945050604061106488828901611003565b935050606061107588828901611003565b925050608061108688828901610fb8565b9150509295509295909350565b600061109e82610fcd565b91506110a983610fcd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e8576110e7610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112557611124610c39565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116257611161610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119f5761119e610c39565b5b82820290509291505056fea2646970667358221220d7dc98484d5ad9472ac226f5fdff6cd079a98b75756b08fb65f7917eb325786164736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101765761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aac565b6101b3565b6040516100b49190610af2565b60405180910390f35b3480156100c957600080fd5b506100d26101fb565b005b3480156100e057600080fd5b506100e961043d565b6040516100f69190610af2565b60405180910390f35b34801561010b57600080fd5b5061011461044a565b6040516101219190610b1c565b60405180910390f35b34801561013657600080fd5b5061013f610474565b60405161014c9190610b96565b60405180910390f35b61015d61049e565b005b34801561016b57600080fd5b506101746105d8565b005b34801561018257600080fd5b5061019d60048036038101906101989190610bdd565b61087e565b6040516101aa9190610b1c565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610282576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561032d576000600182815481106102a8576102a7610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032590610c68565b915050610285565b50600067ffffffffffffffff81111561034957610348610cb1565b5b6040519080825280602002602001820160405280156103775781602001602082028036833780820191505090505b506001908051906020019061038d9291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b490610d11565b60006040518083038185875af1925050503d80600081146103f1576040519150601f19603f3d011682016040523d82523d6000602084013e6103f6565b606091505b505090508061043a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190610d83565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104dd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c690919063ffffffff16565b101561051e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051590610def565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056c9190610e0f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610699575b5050505050905060005b815181101561076d57600082828151811061070b5761070a610c0a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076590610c68565b9150506106ed565b50600067ffffffffffffffff81111561078957610788610cb1565b5b6040519080825280602002602001820160405280156107b75781602001602082028036833780820191505090505b50600190805190602001906107cd9291906109a2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f490610d11565b60006040518083038185875af1925050503d8060008114610831576040519150601f19603f3d011682016040523d82523d6000602084013e610836565b606091505b505090508061087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190610eb1565b60405180910390fd5b5050565b60006001828154811061089457610893610c0a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d283610902565b90506000670de0b6b3a764000085836108eb9190610ed1565b6108f59190610f5a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611018565b5050509150506402540be4008161099a9190611093565b915050919050565b828054828255906000526020600020908101928215610a1b579160200282015b82811115610a1a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c2565b5b509050610a289190610a2c565b5090565b5b80821115610a45576000816000905550600101610a2d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7982610a4e565b9050919050565b610a8981610a6e565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b600060208284031215610ac257610ac1610a49565b5b6000610ad084828501610a97565b91505092915050565b6000819050919050565b610aec81610ad9565b82525050565b6000602082019050610b076000830184610ae3565b92915050565b610b1681610a6e565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b6000819050919050565b6000610b5c610b57610b5284610a4e565b610b37565b610a4e565b9050919050565b6000610b6e82610b41565b9050919050565b6000610b8082610b63565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b610bba81610ad9565b8114610bc557600080fd5b50565b600081359050610bd781610bb1565b92915050565b600060208284031215610bf357610bf2610a49565b5b6000610c0184828501610bc8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7382610ad9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ca657610ca5610c39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cfb600083610ce0565b9150610d0682610ceb565b600082019050919050565b6000610d1c82610cee565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d6d600b83610d26565b9150610d7882610d37565b602082019050919050565b60006020820190508181036000830152610d9c81610d60565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dd9601b83610d26565b9150610de482610da3565b602082019050919050565b60006020820190508181036000830152610e0881610dcc565b9050919050565b6000610e1a82610ad9565b9150610e2583610ad9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e5a57610e59610c39565b5b828201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e9b600b83610d26565b9150610ea682610e65565b602082019050919050565b60006020820190508181036000830152610eca81610e8e565b9050919050565b6000610edc82610ad9565b9150610ee783610ad9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2057610f1f610c39565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6582610ad9565b9150610f7083610ad9565b925082610f8057610f7f610f2b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610faa81610f8b565b8114610fb557600080fd5b50565b600081519050610fc781610fa1565b92915050565b6000819050919050565b610fe081610fcd565b8114610feb57600080fd5b50565b600081519050610ffd81610fd7565b92915050565b60008151905061101281610bb1565b92915050565b600080600080600060a0868803121561103457611033610a49565b5b600061104288828901610fb8565b955050602061105388828901610fee565b945050604061106488828901611003565b935050606061107588828901611003565b925050608061108688828901610fb8565b9150509295509295909350565b600061109e82610fcd565b91506110a983610fcd565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e8576110e7610c39565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112557611124610c39565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116257611161610c39565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119f5761119e610c39565b5b82820290509291505056fea2646970667358221220d7dc98484d5ad9472ac226f5fdff6cd079a98b75756b08fb65f7917eb325786164736f6c63430008080033",
  "devdoc": {
    "author": "Aakash Malik",
    "details": "This implements pricefeeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements pricefeeds as our library"
      }
    },
    "title": "A contract for crowd funding ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}